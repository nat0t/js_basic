/* Дан код:

var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
d = b++; alert(d);           // 1
c = (2+ ++a); alert(c);      // 5
d = (2+ b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3

Почему код даёт именно такие результаты? */

/* c = ++a; alert(c);
Здесь используется префиксная форма оператора инкрементирования. То есть сначала значение вычисляется, а затем возвращается.

d = b++; alert(d);
Здесь используется постфиксная форма оператора инкрементирования. То есть сначала значение возвращается, а затем вычисляется.

c = (2+ ++a); alert(c);
В переменной a хранится значение 2 после выполнения предыдущей операции. Далее приоритет оператора инкрементирования выше, чем у сложения, следовательно сначала выполняется инкрементирование, а затем сложение.

d = (2+ b++); alert(d);
В переменной b хранится значение 2 после выполнения предыдущей операции. Далее приоритет оператора инкрементирования выше, чем у сложения, следовательно сначала выполняется инкрементирование, а затем сложение. Однако, в постфиксной форме инкрементирования значение сначала возвращается, следовательно в операции сложения в качестве второго операнда участвует 2.

alert(a);
alert(b);
Независимо от формы записи оператора инкрементирования значение переменной в итоге увеличивается на единицу. Инкремент к каждой переменной применялся два раза, следовательно итоговые значения равны трем. */